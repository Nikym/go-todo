// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	domain "github.com/Nikym/go-todo/pkg/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// EntryRepository is an autogenerated mock type for the EntryRepository type
type EntryRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *EntryRepository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *EntryRepository) Get(id string) (*domain.Entry, error) {
	ret := _m.Called(id)

	var r0 *domain.Entry
	if rf, ok := ret.Get(0).(func(string) *domain.Entry); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: entry
func (_m *EntryRepository) Save(entry *domain.Entry) error {
	ret := _m.Called(entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Entry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, entry
func (_m *EntryRepository) Update(id string, entry *domain.Entry) error {
	ret := _m.Called(id, entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.Entry) error); ok {
		r0 = rf(id, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
